//// -- LEVEL 1
//// -- Tables and References

// Creating tables
Table candidat as C {
  cod int [pk, unique]
  civ_lib int [not null]
  nom text [not null]
  prenom text [not null]
  ad_1 text [not null]
  ad_2 text
  cod_pos int [not null]
  com int [not null]
  pay_adr int [not null]
  mel text [not null]
  tel text
  por text
  rang_ecrit int [not null]
  rang_oral int [not null]
  resultat int [not null]
  // resultat contient au choix "admis", "admis-spe", "admissible", "admissible-spe"
  // admis implique admis-spe (idem pour admissible)
  fil int [not null]
  // Index de la filiÃ¨re dans la table filiere 
}

Table voeux_ecole as V {
  can_cod int [pk, unique]
  voe_rang int [not null]
  voe_ord int [not null]
  eco_cod int [not null]
 }

Table ecole as Ec {
  code int [pk, not null]
  nom text [not null]
}

Table etablissement as E {
  rne text [pk, not null]
  type text [not null]
  nom text [not null]
  code_postal int [not null]
  ville text [not null]
  pays int [not null]
}

Table FILIERE as F {
  filiere_code int [pk]
  liste_filiere text 
}

Table PAYS as P {
  pays_code int [pk]
  nom text [not null]
}

Table civilite as CIV{
  civilite_code int [pk]
  civilite text [not null]
}

Table resultat as RES{
  resultat_index int [pk]
  resultat text [not null]
}

Table COMMUNE as COM{
  commune_index int [pk]
  commune text [not null]
}

// Creating references
// You can also define relaionship separately
// > many-to-one; < one-to-many; - one-to-one
//Ref: U.country_code > countries.code  
//Ref: merchants.country_code > countries.code

//----------------------------------------------//
Ref : C.com > COM.commune
Ref : C.resultat > RES.resultat_index
Ref : C.cod - V.can_cod
Ref : V.eco_cod > Ec.code
Ref : C.civ_lib > CIV.civilite_code
Ref : C.pay_adr > P.pays_code
Ref : E.pays > P.pays_code
Ref : "candidat"."fil" > FILIERE."filiere_code"